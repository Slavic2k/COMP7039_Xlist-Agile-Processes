<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Gold Price Chart</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/luxon@3.4.3/build/global/luxon.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@1.3.0"></script>
</head>
<body>
  <h2>Gold Price over time (USD/oz)</h2>
  <canvas id="priceChart" width="800" height="300"></canvas>

  <script>
    async function fetchCSVData() {
      const response = await fetch('data.csv');
      const text = await response.text();
      console.log('Raw CSV text:', text);

      const rows = text.trim().split('\n');
      console.log('Parsed rows:', rows);

      const dataPoints = [];

      rows.forEach((row, index) => {
        console.log(`Row ${index}:`, row);
        const match = row.match(/^(\d{2}\/\d{2}\/\d{4}),"(.*?)"/); // relaxed regex
        if (match) {
          const [month, day, year] = match[1].split('/');
          const isoDate = `${year}-${month}-${day}`;
          const price = parseFloat(match[2].replace(/,/g, ''));
          if (!isNaN(price)) {
            dataPoints.push({ x: isoDate, y: price });
          } else {
            console.warn(`Row ${index}: Invalid price "${match[2]}"`);
          }
        } else {
          console.warn(`Row ${index}: No match for "${row}"`);
        }
      });

      return dataPoints.reverse(); // chronological order
    }

    async function renderChart() {
      const dataPoints = await fetchCSVData();
      console.log('Final data points:', dataPoints);

      const ctx = document.getElementById('priceChart').getContext('2d');
      new Chart(ctx, {
        type: 'line',
        data: {
datasets: [{
  label: 'Price ($/oz t)',
  data: dataPoints,
  borderColor: 'rgba(185, 184, 26, 0.8)',
  backgroundColor: 'rgba(255, 254, 155, 0.8)',
  fill: true,
  tension: 0.3,
  pointRadius: 0,
  pointHoverRadius: 5
}]

        },
options: {
  interaction: {
    mode: 'index',
    intersect: false
  },
  scales: {
x: {
  type: 'time',
  time: {
    unit: 'month',
    round: 'month',
    tooltipFormat: 'dd LLL yyyy',
    displayFormats: {
      month: 'MMM yyyy' // e.g., Jan 2025
    }
  },
  ticks: {
    source: 'data' // use actual data points for ticks
  },
  title: {
    display: true,
    text: 'Date'
  }
}
,
y: {
  title: {
    display: true,
    text: 'Price (â‚¬)'
  },
  beginAtZero: true,
  min: 0,
  max: 5000
}

  }
}
      });
    }

    renderChart();
  </script>
</body>
</html>
